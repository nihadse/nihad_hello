
import networkx as nx
import matplotlib.pyplot as plt

# Assuming you have a DataFrame named 'df' with columns 'sector', 'keyword', and 'similarity'
# Replace this with your actual DataFrame and column names
# df = ...

# Create a graph
G = nx.Graph()

# Add nodes and edges based on your data
for index, row in df.iterrows():
    G.add_node(row['sector'])
    G.add_node(row['keyword'])
    G.add_edge(row['sector'], row['keyword'], weight=row['similarity'])

# Position nodes based on sectors
pos = nx.spring_layout(G, seed=42)

# Draw the graph with node colors and sizes based on similarity scores
edge_labels = {(i, j): f"{G[i][j]['weight']:.2f}" for i, j in G.edges()}
nx.draw_networkx_nodes(G, pos, node_size=700)
nx.draw_networkx_labels(G, pos)
nx.draw_networkx_edges(G, pos)
nx.draw_networkx_edge_labels(G, pos, edge_labels=edge_labels)

plt.show()






import seaborn as sns
import matplotlib.pyplot as plt

# Assuming you have your data in a list of tuples like (sector, keyword, similarity_score)
data = [("Finance", "investment", 0.8),
        ("Technology", "innovation", 0.6),
        ("Healthcare", "medical", 0.7),
        # Add more data as needed
       ]

# Unpack data into separate lists
sectors, keywords, similarity_scores = zip(*data)

# Create a DataFrame for easier plotting with Seaborn
import pandas as pd
df = pd.DataFrame({'Sector': sectors, 'Keyword': keywords, 'Similarity Score': similarity_scores})

# Plotting the graph using Seaborn
plt.figure(figsize=(10, 6))
sns.scatterplot(data=df, x='Sector', y='Keyword', hue='Similarity Score', palette='viridis', s=100, alpha=0.8)

# Adding labels and legend
plt.xlabel('Sector of Activity')
plt.ylabel('Related Keywords')
plt.title('Sector of Activity vs. Related Keywords')
plt.legend(title='Similarity Score')

# Display the plot
plt.show()










from sklearn.cluster import KMeans
import numpy as np

# Replace these with your actual class and keyword embeddings
class_embeddings = [...]  # Your class embeddings
keyword_embeddings = [...]  # Your keyword embeddings

# Combine class and keyword embeddings into a single matrix
data_matrix = np.concatenate((class_embeddings, keyword_embeddings), axis=0)

# Determine the number of clusters based on the number of classes
num_clusters = len(class_embeddings)

# Apply K-means clustering
kmeans = KMeans(n_clusters=num_clusters, random_state=42)
clusters = kmeans.fit_predict(data_matrix)

# Assign each keyword to a cluster
clustered_data = {}
for i, cluster in enumerate(clusters):
    if cluster not in clustered_data:
        clustered_data[cluster] = []
    clustered_data[cluster].append((keywords[i], class_embeddings[i]))

# Print or further analyze the clustered data
for cluster, data_points in clustered_data.items():
    print(f"Cluster {cluster + 1}:")
    for data_point in data_points:
        print(f"Keyword: {data_point[0]}, Class Embedding: {data_point[1]}")
    print("\n")








**Rapport sur l'Analyse de Similarité Sémantique entre les Mots-Clés et les Secteurs d'Activité Utilisant les Embeddings de Mots**

*Introduction :*
Cette étude se concentre sur l'évaluation de la similarité sémantique entre un fichier de mots-clés et les secteurs d'activité en utilisant les embeddings de mots. L'objectif est de classifier les secteurs en fonction des relations sémantiques identifiées à travers les embeddings de mots.

*Méthodologie :*
1. **Entrée de Données :**
   - Utilisation de deux fichiers d'entrée :
      - Fichier de Mots-Clés : Contient des mots-clés pertinents pour l'analyse.
      - Fichier de Secteurs : Englobe les secteurs d'activité à classer.

2. **Embeddings de Mots :**
   - Application de techniques d'embedding de mots pour représenter les mots sous forme de vecteurs dans un espace multidimensionnel.
   - Utilisation d'embeddings pré-entraînés ou d'embeddings entraînés sur les données fournies.

3. **Calcul de la Similarité Sémantique :**
   - Mesure de la similarité sémantique entre les mots-clés et les secteurs en utilisant la similarité cosinus ou d'autres métriques appropriées.
   - Établissement d'un seuil de classification basé sur les scores de similarité.

*Résultats :*
   - Identification des relations sémantiques entre les mots-clés et les secteurs.
   - Classification des secteurs en fonction du seuil établi pour la similarité.

*Conclusion :*
   - Résumé des résultats et de leur pertinence par rapport à l'objectif.
   - Suggestions pour de futures recherches ou améliorations de la méthodologie.

*Recommandations :*
   - Recommandations pour affiner le processus de classification ou explorer des approches alternatives.

*Remerciements :*
   - Remerciements pour tout outil, ensemble de données ou ressource utilisé dans l'analyse.

*Références :*
   - Citation de la littérature pertinente, des outils ou des méthodologies utilisés.

*Annexe :*
   - Inclusion de toute information supplémentaire, extraits de code ou détails additionnels soutenant l'analyse.

*Note :*
Ce rapport offre une vue d'ensemble concise de l'analyse de similarité sémantique réalisée entre les mots-clés et les secteurs à l'aide des embeddings de mots, en mettant l'accent sur la méthodologie employée. Pour une compréhension plus détaillée, veuillez vous référer à l'annexe jointe et aux matériaux supplémentaires.




https://designs.ai/imagemaker/start/en


https://www.craiyon.com/


https://starryai.com/app/create/art?project=


https://app.jasper.ai/?signInWithGoogle=popup

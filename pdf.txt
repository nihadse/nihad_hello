from PIL import Image
import pytesseract
import PyPDF2

# Ouvrez le PDF scanné
pdf_file = open('votre_fichier.pdf', 'rb')
pdf_reader = PyPDF2.PdfFileReader(pdf_file)
pdf_writer = PyPDF2.PdfFileWriter()

# Parcourez chaque page du PDF scanné
for page_number in range(pdf_reader.numPages):
    page = pdf_reader.getPage(page_number)
    
    # Convertissez la page en une image PIL (Pillow)
    image = page.extract_text()  # Extrayez la page en tant qu'image (scannée)

    # Utilisez Tesseract pour extraire le texte de l'image
    text = pytesseract.image_to_string(image)
    
    # Créez une nouvelle page avec le texte extrait
    pdf_page = PyPDF2.pdf.PageObject.createTextPage(text)
    
    # Ajoutez la nouvelle page au PDF de sortie
    pdf_writer.addPage(pdf_page)

# Enregistrez le PDF textuel
with open('pdf_textuel.pdf', 'wb') as output_pdf_file:
    pdf_writer.write(output_pdf_file)

# Fermez le PDF d'origine
pdf_file.close()









from PyPDF2 import PdfReader

def extract_text_from_pdf(pdf_file):
  """Extracts text from a PDF file using PdfReader.

  Args:
    pdf_file: The path to the PDF file.

  Returns:
    A string containing the extracted text.
  """

  pdf_reader = PdfReader(pdf_file)
  extracted_text = ""
  for page in pdf_reader.pages:
    extracted_text += page.extractText()

  return extracted_text


# Example usage:

pdf_file = "/path/to/pdf.pdf"
extracted_text = extract_text_from_pdf(pdf_file)

# Print the extracted text.
print(extracted_text)

import PyPDF2

# Ouvrir le fichier PDF en mode lecture binaire
with open('votre_fichier.pdf', 'rb') as pdf_file:
    # Créer un objet PdfReader
    pdf_reader = PyPDF2.PdfReader(pdf_file)

    # Vérifier que le PDF est lisible
    if not pdf_reader.isEncrypted:
        # Créer une variable pour stocker le texte extrait
        text = ''

        # Parcourir chaque page du PDF
        for page_number in range(len(pdf_reader.pages)):
            # Obtenir la page
            page = pdf_reader.pages[page_number]

            # Extraire le texte de la page
            page_text = page.extract_text()

            # Ajouter le texte de la page à la variable text
            text += page_text

# Afficher le texte extrait
print(text)

import PyPDF2

# Ouvrir le fichier PDF en mode lecture binaire
with open('votre_fichier.pdf', 'rb') as pdf_file:
    # Créer un objet PDFReader
    pdf_reader = PyPDF2.PdfFileReader(pdf_file)

    # Vérifier que le PDF est lisible
    if not pdf_reader.isEncrypted:
        # Créer une variable pour stocker le texte extrait
        text = ''

        # Parcourir chaque page du PDF
        for page_number in range(pdf_reader.getNumPages()):
            # Obtenir la page
            page = pdf_reader.getPage(page_number)

            # Extraire le texte de la page
            page_text = page.extractText()

            # Ajouter le texte de la page à la variable text
            text += page_text

# Afficher le texte extrait
print(text)




import os
import PyPDF2

# Function to extract text from a PDF file
def extract_text_from_pdf(pdf_path):
    text = ""
    with open(pdf_path, 'rb') as pdf_file:
        pdf_reader = PyPDF2.PdfFileReader(pdf_file)
        for page_num in range(pdf_reader.numPages):
            page = pdf_reader.getPage(page_num)
            text += page.extractText()
    return text

# Directory where your PDF documents are stored
pdf_directory = '/path/to/pdf/files'

# Create a dictionary to map file names to their content
pdf_data = {}
for filename in os.listdir(pdf_directory):
    if filename.endswith('.pdf'):
        pdf_path = os.path.join(pdf_directory, filename)
        pdf_data[filename] = extract_text_from_pdf(pdf_path)

# Function to search for a query in PDF content
def search_pdf(query):
    results = {}
    for filename, content in pdf_data.items():
        if query.lower() in content.lower():
            results[filename] = content
    return results

# Main loop for the chatbot
while True:
    user_input = input("Enter your query (type 'exit' to quit): ")
    if user_input.lower() == 'exit':
        break
    search_results = search_pdf(user_input)
    if not search_results:
        print("No matching documents found.")
    else:
        print("Matching documents:")
        for filename, content in search_results.items():
            print(f"File: {filename}")
            # You can choose how to display or handle the content here

print("Chatbot terminated.")

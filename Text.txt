Subject: Documents de Notification d'Interdiction

Bonjour [Nom de la destinataire],

Veuillez trouver en pièce jointe le fichier Word ainsi que le fichier PDF contenant les lettres de notification d'interdiction générées. Ces fichiers ne contiennent que les enregistrements de la feuille Excel ayant un score de similarité supérieur à 95 %. Vous trouverez également en pièce jointe le fichier des résultats pour ce mois d'octobre.

Je vous informe par ailleurs que la base de données avec laquelle nous travaillons est mise à jour chaque 7 du mois.

N'hésitez pas à revenir vers moi pour toute question ou demande d'information supplémentaire.

Cordialement,
Nihad Senhadji




IF LEFT([numéro], 2) = "00" THEN "0" + RIGHT([numéro], LEN([numéro]) - 2) ELSE [numéro] ENDIF


Bonjour [Nom de la personne],

J'aimerais savoir comment vous envoyez les résultats ou les outputs des cas d'usage que vous avez développés dans Domino Data Lab. Pourriez-vous m'en dire plus sur votre processus de transmission de ces informations ?

Merci d'avance pour votre retour !

Cordialement,
Nihad



WriteBot réécrit 270 procédures en raison de l'implémentation du nouveau système CBS, ce qui permet de rationaliser les opérations, d'améliorer l'efficacité et d'automatiser les tâches manuelles




WriteBot réécrit 270 procédures en raison de l'implémentation du nouveau système CBS, ce qui permet de rationaliser les opérations, d'améliorer l'efficacité et d'automatiser les tâches manuelles


Pour votre information, cette extraction date du mois dernier, et nous la recevons au début de chaque mois.

Cordialement,
Nihad



Here's an updated version:


---

Hi [Name],

I came across your message in the Gen AI chats regarding your request for the embeddings model. Could you let me know how you requested it? I'm interested in the process.

Thanks!





pip install langchain pymupdf unstructured
import os
from langchain.document_loaders import PyMuPDFLoader
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain.embeddings import OpenAIEmbeddings
from langchain.vectorstores import Chroma

def load_pdfs_with_langchain(folder_path):
    documents = []

    # Loop through each file in the folder
    for filename in os.listdir(folder_path):
        if filename.endswith(".pdf"):
            file_path = os.path.join(folder_path, filename)
            loader = PyMuPDFLoader(file_path)
            docs = loader.load()
            documents.extend(docs)

    return documents

# Example usage
folder_path = "path/to/your/pdfs"
documents = load_pdfs_with_langchain(folder_path)

# Split text into manageable chunks (for embedding)
text_splitter = RecursiveCharacterTextSplitter(chunk_size=1000, chunk_overlap=100)
split_docs = text_splitter.split_documents(documents)

# Embed using OpenAI embeddings and store in Chroma for querying
embeddings = OpenAIEmbeddings()  # Substitute with your embedding model
vector_store = Chroma.from_documents(split_docs, embedding=embeddings)

# Now you can query `vector_store` for retrieval-augmented generation (RAG)pip install langchain pymupdf unstructured






https://github.com/langchain-ai/rag-from-scratch/blob/main/rag_from_scratch_5_to_9.ipynb


# Chargement des Packages

Dans cette section, nous allons charger les packages et les bibliothèques Python nécessaires pour faciliter notre projet de détection de fraude au sein des communautés en utilisant la théorie des graphes. Ces packages sont essentiels pour la manipulation des données, la visualisation et l'apprentissage automatique. Voici la liste des packages que nous avons importés :

1. **pandas** : Utilisé pour la manipulation et l'analyse des données.
2. **seaborn** : Une bibliothèque de visualisation de données basée sur matplotlib.
3. **openpyxl** : Permet de travailler avec des fichiers Excel.
4. **numpy** : Fournit un support pour les fonctions mathématiques et les tableaux.
5. **networkx** : Une bibliothèque puissante pour la création, la manipulation et l'étude des réseaux complexes.
6. **re** : Fournit des opérations d'expressions régulières.
7. **pickle** : Utilisé pour la sérialisation et la désérialisation des objets Python.
8. **time** : Pour les fonctions et mesures liées au temps.
9. **matplotlib** : Nous permet de créer diverses visualisations de données.
10. **collections** : Fournit des structures de données et des algorithmes supplémentaires.
11. **datetime** : Pour travailler avec les dates et les heures.
12. **sklearn.model_selection** : Fait partie de scikit-learn, utilisé pour la division des données et l'évaluation des modèles.
13. **sklearn.tree** : Contient DecisionTreeClassifier pour les tâches d'apprentissage automatique.
14. **sklearn.linear_model** : Pour la modélisation de régression linéaire.
15. **sklearn.feature_extraction.text** : Prend en charge le traitement des données textuelles à l'aide de CountVectorizer.
16. **sklearn.metrics** : Contient la métrique de score d'exactitude pour l'évaluation des modèles.
17. **warnings** : Aide à gérer les messages d'avertissement dans le code.
18. **pyvis.network** : Utilisé pour créer des visualisations interactives de réseaux.
19. **community** : Fait partie de networkx, pour la détection de communautés dans les graphes.

Ces packages joueront un rôle crucial dans notre projet, de la prétraitement et l'analyse des données à la visualisation des graphes et à l'apprentissage automatique pour la détection de la fraude. Plongeons dans la mise en œuvre de notre algorithme de détection de fraude au sein des communautés en utilisant ces bibliothèques.



import pytesseract
from pdf2image import convert_from_path

# Path to your scanned PDF
pdf_path = 'your_swift_messages.pdf'  # Replace with the path to your scanned PDF

# Convert each page of the scanned PDF to an image and extract text
extracted_text = ""
images = convert_from_path(pdf_path)

for image in images:
    text = pytesseract.image_to_string(image)
    extracted_text += text

# Print or process the extracted text as needed
print(extracted_text)







import PyPDF2
import pytesseract
from PIL import Image

# Open the scanned PDF
pdf_path = 'your_swift_messages.pdf'  # Replace with the path to your scanned PDF
pdf_file = open(pdf_path, 'rb')
pdf_reader = PyPDF2.PdfFileReader(pdf_file)

# Initialize a variable to store the extracted text
extracted_text = ""

# Loop through each page of the PDF
for page_num in range(pdf_reader.numPages):
    page = pdf_reader.getPage(page_num)
    
    # Convert the scanned page to an image
    page_image = page.extract_text() 
    page_image = Image.frombytes('L', page_image.size, page_image)
    
    # Perform OCR to extract text from the image
    text = pytesseract.image_to_string(page_image)
    
    # Append the extracted text from this page to the result
    extracted_text += text

# Close the PDF file
pdf_file.close()

# Print or process the extracted text as needed
print(extracted_text)






import pytesseract.pytesseract as pytesseract
from PIL import Image

# Open the scanned image
image = Image.open('your_swift_message.png')  # Replace with the path to your image file

# Perform OCR to extract text
extracted_text = pytesseract.image_to_string(image)

# Print or process the extracted text as needed
print(extracted_text)
